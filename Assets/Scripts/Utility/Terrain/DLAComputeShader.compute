#pragma kernel Blur
#pragma kernel Upscale

// Input Texture and Output RWTexture
RWStructuredBuffer<float> Input;
RWStructuredBuffer<float> Output;
uint size;

int blurSize;

[numthreads(8,8,1)]
void Blur(uint3 id : SV_DispatchThreadID) {

    if (id.x >= size || id.y >= size)
        return;
    
    const uint index = id.y * size + id.x;
    
    float sum = 0;
    uint count = 0;

    for (int y = -blurSize; y <= blurSize; y++)
    {
        for (int x = -blurSize; x <= blurSize; x++)
        {
            int nx = id.x + x;
            int ny = id.y + y;

            if (nx < 0 || nx >= size || ny < 0 || ny >= size) continue;
            
            sum += Input[ny * size + nx];
            count++;
            
        }
    }
    
    Output[index] = sum / count;
}

[numthreads(8,8,1)]
void Upscale(uint3 id : SV_DispatchThreadID) { // size should be set to size prior to upscale 
    uint newSize = size * 2;
    
    if (id.x >= newSize || id.y >= newSize)
        return;
    
    const uint x = id.x / 2;
    const uint y = id.y / 2;
    

    const float val = Input[y * size + x];
    const float right = (x + 1 < size) ? Input[y * size + (x + 1)] : val;
    const float bottom = (y + 1 < size) ? Input[(y + 1) * size + x] : val;
    const float bottomRight = (x + 1 < size && y + 1 < size) ? Input[(y + 1) * size + (x + 1)] : val;

    float result;
    if (id.x % 2 == 0 && id.y % 2 == 0)
        result = val;
    else if (id.x % 2 == 1 && id.y % 2 == 0)
        result = (val + right) / 2;
    else if (id.x % 2 == 0 && id.y % 2 == 1)
        result = (val + bottom) / 2;
    else
        result = (val + right + bottom + bottomRight) / 4;
    
    Output[id.y * newSize + id.x] = result;
}
